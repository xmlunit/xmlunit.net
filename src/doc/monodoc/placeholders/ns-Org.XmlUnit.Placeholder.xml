<Namespace Name="Org.XmlUnit.Placeholder">
  <Docs>
    <summary>Keyword based Configuration Experiment.</summary>
    <remarks>
      <para>Experimental support for configuring parts of the test
      engine by using <c>${xmlunit.KEYWORD}</c> sequences inside the
      control document.</para>

      <para>This namepace and the whole package are considered
      experimental and any API may change between releases of
      XMLUnit.</para>

      <para>The placeholder feature allows a placeholder sequence of
      <c>${xmlunit.KEYWORD(args...)}</c> to be used as nested text in
      elements or as attribute values of the control document and
      trigger special handling based on the keyword.</para>

      <para>The "special handling" is controlled by an instance of
      <c>IPlaceholderHandler</c> per keyword. The class
      <c>PlaceholderDifferenceEvaluator</c> loads all implementations
      from the current assembly via reflection.</para>

      <para>The placeholder sequence can take any number of string
      values as arguments in the form
      <c>${xmlunit.KEYWORD(args1,arg2)}</c> - if no arguments are used
      the parentheses can be omitted completely. Arguments are not
      quoted, whitespace inside of the argument list is
      significant. All separators (by default <c>${</c>, <c>}</c>,
      <c>(</c>, <c>)</c>, and <c>,</c>) can be configured
      explicitly.</para>

      <para>Keywords currently supported by built-in handlers
      are:</para>
      <list type="table">

        <item><term><c>${xmlunit.ignore}</c></term> <description>which
        makes XMLUnit ignore the nested text or attribute
        completely. This is handled by
        <c>IgnorePlaceholderHandler</c>.</description></item>

        <item><term><c>${xmlunit.isNumber}</c></term> <description>
        makes the comparison pass if the textual content of the
        element or attributes looks like a number. This is handled by
        <c>IsNumberPlaceholderHandler</c>.</description></item>

        <item><term><c>${xmlunit.matchesRegex}</c></term>
        <description> makes the comparison pass if the textual content
        of the element or attribute matches the regular expression
        specified as the first (and only) argument.  If there is no
        argument at all, the comparison will fail. This is handled by
        <c>MatchesRegexPlaceholderHandler</c>.</description></item>

        <item><term><c>${xmlunit.isDateTime}</c></term> <description>
        makes the comparison pass if the textual content of the
        element or attributes looks like a date or datetime in the
        current locale or parsed by ISO rules. An optional argument
        can be used to specify a pattern unserstood by
        <c>DateTime.ParseExact</c> to use when trying to parse the
        test. This is handled by
        <c>IsDateTimePlaceholderHandler</c>.</description></item>

      </list>

      <para>The default delimiters of <c>${</c> and <c>}</c> can be
      overwritten using custom regular expressions.</para>

      <para>The easiest way to activate the placeholder feature is to
      use one of the methods in <c>PlaceholderSupport</c> to add it to
      a <c>org.xmlunit.builder.DiffBuilder</c> or
      <c>org.xmlunit.matchers.CompareMatcher</c> instance. The
      alternative approach is to create an instance of
      <c>PlaceholderDifferenceEvaluator</c> as a
      <c>org.xmlunit.diff.DifferenceEvaluator</c> and add it to the
      builder yourself.</para>

      <para>Placeholder sequences must appear as values inside of
      attribute values or nested textual content of elements - inside
      the control document. As a special case they may also appear as
      local part of a type name of xsi:type attributes of control
      documents - i.e. <c>xsi:type="prefix:${xmlunit:ignore}"</c>. The
      namepace URIs of the compared types must match with the test
      document. Support for xsi:types has been added with XMLUnit.NET
      2.11.1.</para>

    </remarks>


  </Docs>
</Namespace>
